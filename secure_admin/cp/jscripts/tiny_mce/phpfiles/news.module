<?php
// $Id: news.module,v 1.297.2.3 2008/05/19 07:27:35 goba Exp $

/**
 * @file
 * Enables keeping an easily and regularly updated web page or a news.
 */

/**
 * Implementation of hook_node_info().
 */
function news_node_info() {
  return array(
    'news' => array(
      'name' => t('news entry'),
      'module' => 'news',
      'description' => t('A <em>news entry</em> is a single post to an online journal, or <em>news</em>.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function news_perm() {
  return array('create news entries', 'delete own news entries', 'delete any news entry', 'edit own news entries', 'edit any news entry');
}

/**
 * Implementation of hook_access().
 */
function news_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission. 
      return user_access('create news entries', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit any news entry', $account) || (user_access('edit own news entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any news entry', $account) || (user_access('delete own news entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}

/**
 * Implementation of hook_user().
 */
function news_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('create news entries', $user)) {
    $user->content['summary']['news'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('news'),
      '#value' => l(t('View recent news entries'), "news/$user->uid", array('attributes' => array('title' => t("Read @username's latest news entries.", array('@username' => $user->name))))),
      '#attributes' => array('class' => 'news'),
    );
  }
}

/**
 * Implementation of hook_help().
 */
function news_help($path, $arg) {
  switch ($path) {
    case 'admin/help#news':
      $output = '<p>'. t('The news module allows registered users to maintain an online journal, or <em>news</em>. newss are made up of individual <em>news entries</em>, and the news entries are most often displayed in descending order by creation time.') .'</p>';
      $output .= '<p>'. t('There is an (optional) <em>newss</em> menu item added to the Navigation menu, which displays all newss available on your site, and a <em>My news</em> item displaying the current user\'s news entries. The <em>news entry</em> menu item under <em>Create content</em> allows new news entries to be created.') .'</p>';
      $output .= '<p>'. t('Each news entry is displayed with an automatic link to other newss created by the same user. By default, news entries have comments enabled and are automatically promoted to the site front page. The news module also creates a <em>Recent news posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('When using the aggregator module an automatic <em>news it</em> icon is displayed next to the items in a feed\'s <em>latest items</em> block. Clicking this icon populates a <em>news entry</em> with a title (the title of the feed item) and body (a link to the source item on its original site and illustrative content suitable for use in a block quote). news authors can use this feature to easily comment on items of interest that appear in aggregator feeds from other sites. To use this feature, be sure to <a href="@modules">enable</a> the aggregator module, <a href="@feeds">add and configure</a> a feed from another site, and <a href="@blocks">position</a> the feed\'s <em>latest items</em> block.', array('@modules' => url('admin/build/modules'), '@feeds' => url('admin/content/aggregator'), '@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@news">news module</a>.', array('@news' => 'http://drupal.org/handbook/modules/news/')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_form().
 */
function news_form(&$node) {
  global $nid;
  $iid = isset($_GET['iid']) ? (int)$_GET['iid'] : 0;
  $type = node_get_types('type', $node);


  if (empty($node->body)) {
    // If the user clicked a "news it" link, we load the data from the
    // database and quote it in the news.
    if ($nid && $news = node_load($nid)) {
      $node->body = '<em>'. $news->body .'</em> ['. l($news->name, "node/$nid") .']';
    }

    if ($iid && $item = db_fetch_object(db_query('SELECT i.*, f.title as ftitle, f.link as flink FROM {aggregator_item} i, {aggregator_feed} f WHERE i.iid = %d AND i.fid = f.fid', $iid))) {
      $node->title = $item->title;
      // Note: $item->description has been validated on aggregation.
      $node->body = '<a href="'. check_url($item->link) .'">'. check_plain($item->title) .'</a> - <em>'. $item->description .'</em> [<a href="'. check_url($item->flink) .'">'. check_plain($item->ftitle) ."</a>]\n";
    }

  }

  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => !empty($node->title) ? $node->title : NULL, '#weight' => -5);
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  return $form;
}

/**
 * Implementation of hook_view().
 */
function news_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    // Breadcrumb navigation
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('newss'), 'news'), l(t("@name's news", array('@name' => $node->name)), 'news/'. $node->uid)));
  }
  return node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function news_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && $node->type == 'news') {
    if (arg(0) != 'news' || arg(1) != $node->uid) {
      $links['news_usernames_news'] = array(
        'title' => t("@username's news", array('@username' => $node->name)),
        'href' => "news/$node->uid",
        'attributes' => array('title' => t("Read @username's latest news entries.", array('@username' => $node->name)))
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function news_menu() {
  $items['news'] = array(
    'title' => 'newss',
    'page callback' => 'news_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'news.pages.inc',
  );
  $items['news/%user_uid_optional'] = array(
    'title' => 'My news',
    'page callback' => 'news_page_user',
    'page arguments' => array(1),
    'access callback' => 'news_page_user_access',
    'access arguments' => array(1),
    'file' => 'news.pages.inc',
  );
  $items['news/%user/feed'] = array(
    'title' => 'newss',
    'page callback' => 'news_feed_user',
    'page arguments' => array(1),
    'access callback' => 'news_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'news.pages.inc',
  );
  $items['news/feed'] = array(
    'title' => 'newss',
    'page callback' => 'news_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'news.pages.inc',
  );

  return $items;
}

/**
 * Access callback for user news pages.
 */
function news_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a news to 'exist' the user must either be able to
  // create new news entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create news entries', $account) || _news_post_exists($account));
}

/**
 * Helper function to determine if a user has news posts already.
 */
function _news_post_exists($account) {
  return (bool)db_result(db_query_range(db_rewrite_sql("SELECT 1 FROM {node} n WHERE n.type = 'news' AND n.uid = %d AND n.status = 1"), $account->uid, 0, 1));
}

/**
 * Implementation of hook_block().
 *
 * Displays the most recent 10 news titles.
 */
function news_block($op = 'list', $delta = 0) {
  global $user;
  if ($op == 'list') {
    $block[0]['info'] = t('Recent news posts12');
    return $block;
  }
  else if ($op == 'view') {
    if (user_access('access content')) {
      $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, r.teaser, n.created FROM node n,node_revisions r WHERE n.nid=r.nid AND n.type = 'news' AND n.status = 1 ORDER BY n.nid DESC"), 0, 2);
      $str="<h1><img src=\"/demo/bible2/themes/at_template/images/news.gif\" width=\"207px\" height=\"33px\"></h1><div class=\"box\"><ul>";
	  $nbr=0;
	  while ($node = db_fetch_object($result)) {
		$str.="<li>".(++$nbr==2?"<br />":"")."<h2>".$node->title."</h2><p>".substr($node->teaser,0,102)."...[ <a href=\"node/".$node->nid."\">more</a> ]</p></li>";
		$num_rows = TRUE;
	  }
	  $str.="</ul></div>";
      $block['content'] = $str;
      $block['content'] .= "<div style='float:right;margin-right:4px;margin-top:4px;'><br /><a href='".url('news')."' title='Read the Latest News.' alt='Read the Latest News.'>More news</a></div>";
      $block['subject'] = t('Recent news posts');
      return $block;      
    }
  }
}

